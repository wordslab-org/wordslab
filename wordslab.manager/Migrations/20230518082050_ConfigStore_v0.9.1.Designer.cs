// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wordslab.manager.storage;

#nullable disable

namespace wordslab.manager.Migrations
{
    [DbContext(typeof(ConfigStore))]
    [Migration("20230518082050_ConfigStore_v0.9.1")]
    partial class ConfigStore_v091
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("ContainerImageInfoContainerImageLayerInfo", b =>
                {
                    b.Property<string>("LayersDigest")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsedByContainerImagesDigest")
                        .HasColumnType("TEXT");

                    b.HasKey("LayersDigest", "UsedByContainerImagesDigest");

                    b.HasIndex("UsedByContainerImagesDigest");

                    b.ToTable("ContainerImageInfoContainerImageLayerInfo");
                });

            modelBuilder.Entity("ContainerImageInfoKubernetesAppInstall", b =>
                {
                    b.Property<string>("ContainerImagesDigest")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsedByKubernetesAppsVirtualMachineName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsedByKubernetesAppsYamlFileHash")
                        .HasColumnType("TEXT");

                    b.HasKey("ContainerImagesDigest", "UsedByKubernetesAppsVirtualMachineName", "UsedByKubernetesAppsYamlFileHash");

                    b.HasIndex("UsedByKubernetesAppsVirtualMachineName", "UsedByKubernetesAppsYamlFileHash");

                    b.ToTable("ContainerImageInfoKubernetesAppInstall");
                });

            modelBuilder.Entity("wordslab.manager.config.ContainerImageInfo", b =>
                {
                    b.Property<string>("Digest")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Registry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Repository")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Digest");

                    b.ToTable("ContainerImage", (string)null);
                });

            modelBuilder.Entity("wordslab.manager.config.ContainerImageLayerInfo", b =>
                {
                    b.Property<string>("Digest")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Digest");

                    b.ToTable("ImageLayer", (string)null);
                });

            modelBuilder.Entity("wordslab.manager.config.HostMachineConfig", b =>
                {
                    b.Property<string>("HostName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BackupSizeGB")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanExposeHttpOnLAN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanExposeHttpsOnLAN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanUseGPUs")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("HttpPort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HttpsPort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KubernetesPort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemoryGB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Processors")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SSHPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VirtualMachineClusterPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VirtualMachineClusterSizeGB")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VirtualMachineDataPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VirtualMachineDataSizeGB")
                        .HasColumnType("INTEGER");

                    b.HasKey("HostName");

                    b.ToTable("HostMachine", (string)null);
                });

            modelBuilder.Entity("wordslab.manager.config.KubernetesAppDeployment", b =>
                {
                    b.Property<string>("VirtualMachineName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Namespace")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppVirtualMachineName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppYamlFileHash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeploymentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastStateTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("VirtualMachineName", "Namespace");

                    b.HasIndex("AppVirtualMachineName", "AppYamlFileHash");

                    b.ToTable("AppDeployment", (string)null);
                });

            modelBuilder.Entity("wordslab.manager.config.KubernetesAppInstall", b =>
                {
                    b.Property<string>("VirtualMachineName")
                        .HasColumnType("TEXT");

                    b.Property<string>("YamlFileHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFullyDownloadedInContentStore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Licence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NamespaceDefault")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RemainingDownloadSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UninstallDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YamlFileContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("YamlFileURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VirtualMachineName", "YamlFileHash");

                    b.ToTable("KubernetesApp", (string)null);
                });

            modelBuilder.Entity("wordslab.manager.config.VirtualMachineConfig", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowHttpAccessFromLAN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowHttpsAccessFromLAN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForwardHttpIngressPortOnLocalhost")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForwardHttpsIngressPortOnLocalhost")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForwardKubernetesPortOnLocalhost")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForwardSSHPortOnLocalhost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HostHttpIngressPort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HostHttpsIngressPort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HostKubernetesPort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HostSSHPort")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPreemptible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VmModelName")
                        .HasColumnType("TEXT");

                    b.Property<int>("VmProvider")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("VirtualMachine", (string)null);
                });

            modelBuilder.Entity("wordslab.manager.config.VirtualMachineInstance", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutionMessages")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kubeconfig")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartArgumentsMessages")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StopTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("VmIPAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("VmProcessId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name", "StartTimestamp");

                    b.ToTable("VMInstance", (string)null);
                });

            modelBuilder.Entity("ContainerImageInfoContainerImageLayerInfo", b =>
                {
                    b.HasOne("wordslab.manager.config.ContainerImageLayerInfo", null)
                        .WithMany()
                        .HasForeignKey("LayersDigest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wordslab.manager.config.ContainerImageInfo", null)
                        .WithMany()
                        .HasForeignKey("UsedByContainerImagesDigest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContainerImageInfoKubernetesAppInstall", b =>
                {
                    b.HasOne("wordslab.manager.config.ContainerImageInfo", null)
                        .WithMany()
                        .HasForeignKey("ContainerImagesDigest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wordslab.manager.config.KubernetesAppInstall", null)
                        .WithMany()
                        .HasForeignKey("UsedByKubernetesAppsVirtualMachineName", "UsedByKubernetesAppsYamlFileHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wordslab.manager.config.KubernetesAppDeployment", b =>
                {
                    b.HasOne("wordslab.manager.config.KubernetesAppInstall", "App")
                        .WithMany()
                        .HasForeignKey("AppVirtualMachineName", "AppYamlFileHash");

                    b.Navigation("App");
                });

            modelBuilder.Entity("wordslab.manager.config.VirtualMachineConfig", b =>
                {
                    b.OwnsOne("wordslab.manager.config.VirtualMachineSpec", "Spec", b1 =>
                        {
                            b1.Property<string>("VirtualMachineConfigName")
                                .HasColumnType("TEXT");

                            b1.HasKey("VirtualMachineConfigName");

                            b1.ToTable("VirtualMachine");

                            b1.WithOwner()
                                .HasForeignKey("VirtualMachineConfigName");

                            b1.OwnsOne("wordslab.manager.config.NetworkSpec", "Network", b2 =>
                                {
                                    b2.Property<string>("VirtualMachineSpecVirtualMachineConfigName")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("HttpIngressPort")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("HttpsIngressPort")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("KubernetesPort")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("SSHPort")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("VirtualMachineSpecVirtualMachineConfigName");

                                    b2.ToTable("VirtualMachine");

                                    b2.WithOwner()
                                        .HasForeignKey("VirtualMachineSpecVirtualMachineConfigName");
                                });

                            b1.OwnsOne("wordslab.manager.config.StorageSpec", "Storage", b2 =>
                                {
                                    b2.Property<string>("VirtualMachineSpecVirtualMachineConfigName")
                                        .HasColumnType("TEXT");

                                    b2.Property<bool>("ClusterDiskIsSSD")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("ClusterDiskSizeGB")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("DataDiskIsSSD")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("DataDiskSizeGB")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("VirtualMachineSpecVirtualMachineConfigName");

                                    b2.ToTable("VirtualMachine");

                                    b2.WithOwner()
                                        .HasForeignKey("VirtualMachineSpecVirtualMachineConfigName");
                                });

                            b1.OwnsOne("wordslab.manager.config.ComputeSpec", "Compute", b2 =>
                                {
                                    b2.Property<string>("VirtualMachineSpecVirtualMachineConfigName")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("MemoryGB")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("Processors")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("VirtualMachineSpecVirtualMachineConfigName");

                                    b2.ToTable("VirtualMachine");

                                    b2.WithOwner()
                                        .HasForeignKey("VirtualMachineSpecVirtualMachineConfigName");
                                });

                            b1.OwnsOne("wordslab.manager.config.GPUSpec", "GPU", b2 =>
                                {
                                    b2.Property<string>("VirtualMachineSpecVirtualMachineConfigName")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("GPUCount")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("MemoryGB")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("ModelName")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("VirtualMachineSpecVirtualMachineConfigName");

                                    b2.ToTable("VirtualMachine");

                                    b2.WithOwner()
                                        .HasForeignKey("VirtualMachineSpecVirtualMachineConfigName");
                                });

                            b1.Navigation("Compute")
                                .IsRequired();

                            b1.Navigation("GPU")
                                .IsRequired();

                            b1.Navigation("Network")
                                .IsRequired();

                            b1.Navigation("Storage")
                                .IsRequired();
                        });

                    b.Navigation("Spec")
                        .IsRequired();
                });

            modelBuilder.Entity("wordslab.manager.config.VirtualMachineInstance", b =>
                {
                    b.HasOne("wordslab.manager.config.VirtualMachineConfig", "Config")
                        .WithMany()
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("wordslab.manager.config.ComputeSpec", "ComputeStartArguments", b1 =>
                        {
                            b1.Property<string>("VirtualMachineInstanceName")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("VirtualMachineInstanceStartTimestamp")
                                .HasColumnType("TEXT");

                            b1.Property<int>("MemoryGB")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Processors")
                                .HasColumnType("INTEGER");

                            b1.HasKey("VirtualMachineInstanceName", "VirtualMachineInstanceStartTimestamp");

                            b1.ToTable("VMInstance");

                            b1.WithOwner()
                                .HasForeignKey("VirtualMachineInstanceName", "VirtualMachineInstanceStartTimestamp");
                        });

                    b.OwnsOne("wordslab.manager.config.GPUSpec", "GPUStartArguments", b1 =>
                        {
                            b1.Property<string>("VirtualMachineInstanceName")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("VirtualMachineInstanceStartTimestamp")
                                .HasColumnType("TEXT");

                            b1.Property<int>("GPUCount")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MemoryGB")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ModelName")
                                .HasColumnType("TEXT");

                            b1.HasKey("VirtualMachineInstanceName", "VirtualMachineInstanceStartTimestamp");

                            b1.ToTable("VMInstance");

                            b1.WithOwner()
                                .HasForeignKey("VirtualMachineInstanceName", "VirtualMachineInstanceStartTimestamp");
                        });

                    b.Navigation("ComputeStartArguments");

                    b.Navigation("Config");

                    b.Navigation("GPUStartArguments");
                });
#pragma warning restore 612, 618
        }
    }
}
