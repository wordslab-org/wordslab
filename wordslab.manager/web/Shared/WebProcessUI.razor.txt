@implements InstallProcessUI

@code{
/*AnsiConsole.Write(string)
AnsiConsole.MarkupLine(string);
    [invert]
    [green]
    [red]
    [dim]
    EscapeMarkup()

AnsiConsole.WriteLine(string)

AnsiConsole.Progress().Start(Action<ProgressContext>)
    ProgressTask ProgressContext.AddTask(description, maxValue)
    set ProgressTask.Value

AnsiConsole.Confirm()

AnsiConsole.Ask(question, defaultValue)*/
}

@if(installInProgress != null) 
{
<h2>@installInProgress.Description</h2>
<div>Status: @installInProgress.Status</div>

<ul>
@foreach(var step in installSteps)
{
   <li>
       <div>@step.Description</div>
        @if(step.IsQuestion)
        {
            <div><button @onclick="() => StepButtonClick(step,true)">YES</button> <button @onclick="() => StepButtonClick(step,false)"n>NO</button></div>  
        }
        else
        {
            <div>Status: @step.Status</div>
            if(step.MaxValue > 0)
            {
            <div>Progress: @step.CurrentValue / @step.MaxValue @step.Unit</div>
            }
        }
        @if(!String.IsNullOrEmpty(step.ResultInfo))
        {
            <div>@step.ResultInfo</div>
        }
        @if(!String.IsNullOrEmpty(step.ErrorMessage))
        {
            <div class="text-danger">@step.ErrorMessage</div>
        }
   </li>          
}
</ul>

}

@code {

    class InstallInfo
    {
        public InstallInfo(string description)
        {
            Description = description;
            Status = InstallStatus.InProgress;
        }

        public string Description;
        public InstallStatus Status;
    }

    enum InstallStatus
    {
        InProgress,
        Success,
        Failed
    }

    class InstallStep
    {
        public InstallStep(string description, bool isQuestion = false)
        {
            Description = description;
            Status = InstallStatus.InProgress;
            ResultInfo = null;
            IsQuestion = isQuestion;
            if (isQuestion)
            {
                SendAnswer = new TaskCompletionSource<bool>();
            }
            else
            {
                SendAnswer = null;
            }
        }

        public string Description;
        public InstallStatus Status;
        public long CurrentValue;
        public long MaxValue;
        public string Unit;
        public string ResultInfo;
        public string ErrorMessage;

        public bool IsQuestion;
        public TaskCompletionSource<bool> SendAnswer;
    }

    InstallInfo installInProgress;
    List<InstallStep> installSteps;

    public void InitInstall(string installDescription)
    {
        if (installInProgress == null || installInProgress.Status!=InstallStatus.InProgress)
        {
            installInProgress = new InstallInfo(installDescription);
            installSteps = new List<InstallStep>();
            InvokeAsync(StateHasChanged);
        }
    }

    public void EndInstall(bool installSuccess)
    {
        installInProgress.Status = installSuccess ? InstallStatus.Success : InstallStatus.Failed;
        InvokeAsync(StateHasChanged);
    }

    public void DisplayInstallStep(int stepNumber, int totalSteps, string stepDescription)
    {
        // AnsiConsole.MarkupLine($"[invert]Step {stepNumber}/{totalSteps}: {stepDescription.EscapeMarkup()}[/]");
        // AnsiConsole.WriteLine("");
    }

    public int DisplayCommandLaunch(string commandDescription)
    {
        int commandId = installSteps.Count;
        var command = new InstallStep(commandDescription);
        installSteps.Add(command);
        InvokeAsync(StateHasChanged);
        return commandId;
    }

    public int RunCommandsAndDisplayProgress(LongRunningCommand[] commands)
    {
        int commandId = installSteps.Count;
        var command = new InstallStep(commandDescription);
        command.MaxValue = maxValue;
        command.Unit = unit;
        installSteps.Add(command);
        InvokeAsync(StateHasChanged);
        return commandId;
    }

    /*public void DisplayCommandProgress(int commandId, long currentValue)
    {
        var command = installSteps[commandId];
        command.CurrentValue = currentValue;
        InvokeAsync(StateHasChanged);
    }*/

    public void DisplayCommandResult(int commandId, bool success, string? resultInfo = null, string? errorMessage= null)
    {        
        var command = installSteps[commandId];
        command.Status = success ? InstallStatus.Success : InstallStatus.Failed;
        command.ResultInfo = resultInfo;
        command.ErrorMessage = errorMessage;
        InvokeAsync(StateHasChanged);
    }

    public Task<bool> DisplayQuestionAsync(string question)
    {
        int commandId = installSteps.Count;
        var command = new InstallStep(question, true);
        installSteps.Add(command);
        InvokeAsync(StateHasChanged);
        return command.SendAnswer.Task;
    }

    public Task<bool> DisplayAdminScriptQuestionAsync(string scriptDescription, string scriptContent)
    {
        int commandId = installSteps.Count;
        var command = new InstallStep(scriptDescription, true);
        command.ResultInfo = scriptContent;
        installSteps.Add(command);
        InvokeAsync(StateHasChanged);
        return command.SendAnswer.Task;
    }

    private void StepButtonClick(InstallStep step, bool choice)
    {
        step.SendAnswer.SetResult(choice);
    }

    public Task<string> DisplayInputQuestionAsync(string question, string defaultValue)
    {
        // var answer = AnsiConsole.Ask(question, defaultValue);
        // AnsiConsole.WriteLine();
        // return Task.FromResult(answer);
    }

    public void DisplayCommandError(string errorMessage)
    {
        var command = installSteps.Last();
        command.ErrorMessage = errorMessage;
        InvokeAsync(StateHasChanged);
    }
}
