@page "/"
@page "/localvm"
@using wordslab.manager.apps;

@implements IDisposable

@inject HostStorage HostStorage
@inject ConfigStore ConfigStore

<PageTitle>Local VMs</PageTitle>

<p></p>

@{
    var config = ConfigStore.HostMachineConfig;
}

@if (config == null)
{
    <p>
        <a href="/console/host%20init" class="btn btn-primary" role="button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
            </svg>
            Configure host machine sandbox: @OS.GetMachineName()
        </a>
    </p>
}
else
{
    <div class="p-3 bg-info bg-opacity-10 border border-info rounded">
        <p><b>Host machine sandbox:</b> @OS.GetMachineName()</p>

        <p>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cpu-fill me-1" viewBox="0 0 16 16">
                <path d="M6.5 6a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3z" />
                <path d="M5.5.5a.5.5 0 0 0-1 0V2A2.5 2.5 0 0 0 2 4.5H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2v1H.5a.5.5 0 0 0 0 1H2A2.5 2.5 0 0 0 4.5 14v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14h1v1.5a.5.5 0 0 0 1 0V14a2.5 2.5 0 0 0 2.5-2.5h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14v-1h1.5a.5.5 0 0 0 0-1H14A2.5 2.5 0 0 0 11.5 2V.5a.5.5 0 0 0-1 0V2h-1V.5a.5.5 0 0 0-1 0V2h-1V.5a.5.5 0 0 0-1 0V2h-1V.5zm1 4.5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3A1.5 1.5 0 0 1 6.5 5z" />
            </svg>
            <span>CPU: @config.Processors</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-memory me-1 ms-2" viewBox="0 0 16 16">
                <path d="M1 3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4.586a1 1 0 0 0 .707-.293l.353-.353a.5.5 0 0 1 .708 0l.353.353a1 1 0 0 0 .707.293H15a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H1Zm.5 1h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Zm5 0h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5Zm4.5.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4ZM2 10v2H1v-2h1Zm2 0v2H3v-2h1Zm2 0v2H5v-2h1Zm3 0v2H8v-2h1Zm2 0v2h-1v-2h1Zm2 0v2h-1v-2h1Zm2 0v2h-1v-2h1Z" />
            </svg>
            <span>RAM: @config.MemoryGB GB</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gpu-card me-1 ms-2" viewBox="0 0 16 16">
                <path d="M4 8a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Zm7.5-1.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3Z" />
                <path d="M0 1.5A.5.5 0 0 1 .5 1h1a.5.5 0 0 1 .5.5V4h13.5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5H2v2.5a.5.5 0 0 1-1 0V2H.5a.5.5 0 0 1-.5-.5Zm5.5 4a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5ZM9 8a2.5 2.5 0 1 0 5 0 2.5 2.5 0 0 0-5 0Z" />
                <path d="M3 12.5h3.5v1a.5.5 0 0 1-.5.5H3.5a.5.5 0 0 1-.5-.5v-1Zm4 1v-1h4v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5Z" />
            </svg>
            <span>GPU:  @if (config.CanUseGPUs) { <text>Yes</text> } else { <text>No</text> }</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hdd-fill me-1 ms-2" viewBox="0 0 16 16">
                <path d="M0 10a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-1zm2.5 1a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zm2 0a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1zM.91 7.204A2.993 2.993 0 0 1 2 7h12c.384 0 .752.072 1.09.204l-1.867-3.422A1.5 1.5 0 0 0 11.906 3H4.094a1.5 1.5 0 0 0-1.317.782L.91 7.204z" />
            </svg>
            <span>Cluster: @config.VirtualMachineClusterSizeGB GB</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-database-fill me-1 ms-2" viewBox="0 0 16 16">
                <path d="M3.904 1.777C4.978 1.289 6.427 1 8 1s3.022.289 4.096.777C13.125 2.245 14 2.993 14 4s-.875 1.755-1.904 2.223C11.022 6.711 9.573 7 8 7s-3.022-.289-4.096-.777C2.875 5.755 2 5.007 2 4s.875-1.755 1.904-2.223Z" />
                <path d="M2 6.161V7c0 1.007.875 1.755 1.904 2.223C4.978 9.71 6.427 10 8 10s3.022-.289 4.096-.777C13.125 8.755 14 8.007 14 7v-.839c-.457.432-1.004.751-1.49.972C11.278 7.693 9.682 8 8 8s-3.278-.307-4.51-.867c-.486-.22-1.033-.54-1.49-.972Z" />
                <path d="M2 9.161V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13s3.022-.289 4.096-.777C13.125 11.755 14 11.007 14 10v-.839c-.457.432-1.004.751-1.49.972-1.232.56-2.828.867-4.51.867s-3.278-.307-4.51-.867c-.486-.22-1.033-.54-1.49-.972Z" />
                <path d="M2 12.161V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16s3.022-.289 4.096-.777C13.125 14.755 14 14.007 14 13v-.839c-.457.432-1.004.751-1.49.972-1.232.56-2.828.867-4.51.867s-3.278-.307-4.51-.867c-.486-.22-1.033-.54-1.49-.972Z" />
            </svg>
            <span>Data: @config.VirtualMachineDataSizeGB GB</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-device-hdd-fill me-1 ms-2" viewBox="0 0 16 16">
                <path d="M8.785 9.896A3.001 3.001 0 0 0 8 4a3 3 0 0 0-.891 5.865c.667-.44 1.396-.91 1.955-1.268.224-.144.483.115.34.34l-.62.96ZM9 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" />
                <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4Zm9 1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm0 13a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-9.5.5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1ZM4 1.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm2.882 11.177a1.102 1.102 0 0 1-1.56-1.559c.1-.098.396-.314.795-.588a4 4 0 1 1 1.946.47c-.537.813-1.02 1.515-1.181 1.677Z" />
            </svg>
            <span>Backup: @config.BackupSizeGB GB</span>
        </p>
         <p>
            @if (!OS.IsWindows)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-ethernet me-1" viewBox="0 0 16 16">
                    <path d="M14 13.5v-7a.5.5 0 0 0-.5-.5H12V4.5a.5.5 0 0 0-.5-.5h-1v-.5A.5.5 0 0 0 10 3H6a.5.5 0 0 0-.5.5V4h-1a.5.5 0 0 0-.5.5V6H2.5a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5ZM3.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm2 0h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5ZM9.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5Z" />
                    <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2ZM1 2a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2Z" />
                </svg>
                <span>SSH ports: @config.SSHPort-@(config.SSHPort + 9)</span>
            }
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-ethernet me-1" viewBox="0 0 16 16">
                <path d="M14 13.5v-7a.5.5 0 0 0-.5-.5H12V4.5a.5.5 0 0 0-.5-.5h-1v-.5A.5.5 0 0 0 10 3H6a.5.5 0 0 0-.5.5V4h-1a.5.5 0 0 0-.5.5V6H2.5a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5ZM3.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm2 0h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5ZM9.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5Z" />
                <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2ZM1 2a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2Z" />
            </svg>
            <span>Kubernetes ports: @config.KubernetesPort-@(config.KubernetesPort + 9)</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-ethernet me-1 ms-2" viewBox="0 0 16 16">
                <path d="M14 13.5v-7a.5.5 0 0 0-.5-.5H12V4.5a.5.5 0 0 0-.5-.5h-1v-.5A.5.5 0 0 0 10 3H6a.5.5 0 0 0-.5.5V4h-1a.5.5 0 0 0-.5.5V6H2.5a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5ZM3.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm2 0h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5ZM9.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5Z" />
                <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2ZM1 2a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2Z" />
            </svg>
            <span>Http ports: @config.HttpPort-@(config.HttpPort + 9) - LAN access: @if (config.CanExposeHttpOnLAN) { <text>Yes</text> } else { <text>No</text> }</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-ethernet me-1 ms-2" viewBox="0 0 16 16">
                <path d="M14 13.5v-7a.5.5 0 0 0-.5-.5H12V4.5a.5.5 0 0 0-.5-.5h-1v-.5A.5.5 0 0 0 10 3H6a.5.5 0 0 0-.5.5V4h-1a.5.5 0 0 0-.5.5V6H2.5a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5ZM3.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm2 0h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5ZM9.75 11h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25Zm1.75.25a.25.25 0 0 1 .25-.25h.5a.25.25 0 0 1 .25.25v1.5a.25.25 0 0 1-.25.25h-.5a.25.25 0 0 1-.25-.25v-1.5Z" />
                <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2ZM1 2a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2Z" />
            </svg>
            <span>Https ports: @config.HttpsPort-@(config.HttpsPort + 9) - LAN access:  @if (config.CanExposeHttpsOnLAN) { <text>Yes</text> } else { <text>No</text> }</span>
        </p>
        <p>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-folder me-1" viewBox="0 0 16 16">
                <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z" />
            </svg>
            <span>Wordslab: <small class="text-muted">@HostStorage.AppDirectory</small></span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-folder me-1 ms-2" viewBox="0 0 16 16">
                <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z" />
            </svg>
            <span>Cluster: <small class="text-muted">@config.VirtualMachineClusterPath</small></span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-folder me-1 ms-2" viewBox="0 0 16 16">
                <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z" />
            </svg>
            <span>Data: <small class="text-muted">@config.VirtualMachineDataPath</small></span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-folder me-1 ms-2" viewBox="0 0 16 16">
                <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z" />
            </svg>
            <span>Backup: <small class="text-muted">@config.BackupPath</small></span>
        </p>
    </div>

    <h3 class="mt-4">Local virtual machines</h3>

    var vms = VmManager.ListLocalVMs();
    if(vms.Count > 0)
    {
        var runningVMs = vms.Where(vm => vm.IsRunning()).ToList();
        if (runningVMs.Count > 0)
        {
            <h5 class="mt-2">Running virtual machines</h5>
            <table class="table table-striped table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th></th>
                        <th scope="col">Name</th>
                        <th scope="col">Http address</th>
                        <th scope="col">Processors</th>
                        <th scope="col">Memory</th>
                        <th scope="col">GPU</th>
                        <th scope="col">Cluster disk</th>
                        <th scope="col">Data disk</th>
                        <th scope="col">Started on</th>
                        <th scope="col">Running since</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var vm in runningVMs)
                    {
                        var instance = vm.RunningInstance;
                        var displayStatus = instance.GetDisplayStatus();
                        string statusMessage;
                        vmsStatus.TryGetValue(vm.Name, out statusMessage);

                        <tr class="align-middle">
                           <td>
                                <button class="btn btn-primary" disabled=@(statusMessage == "stopping") @onclick="@(async () => await StopLocalVM(vm))">
                                @if(statusMessage == "stopping")
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <text>   Stopping...</text>
                                } 
                                else 
                                {                                    
                                    <text>Stop</text>
                                }
                                </button>
                                @if(statusMessage != null && statusMessage.StartsWith("Failed"))
                                {
                                    <div class="alert alert-primary" role="alert">
                                      @statusMessage
                                    </div>
                                }
                            </td>
                            <td class="fs-4 fw-bold">@vm.Name</td>
                            <td>@instance.GetHttpAddressAndPort()</td>                            
                            <td>@displayStatus.Processors <div class="text-primary">@displayStatus.ProcessorsUsage used</div></td>
                            <td>@displayStatus.Memory <div class="text-primary">@displayStatus.MemoryUsage used</div></td>
                            <td>@displayStatus.GPU <div class="text-primary">@displayStatus.GPUUsage</div></td>
                            <td>@vm.Config.Spec.Storage.ClusterDiskSizeGB GB <div class="text-primary">@vm.ClusterDisk.CurrentSizeGB GB used</div></td>
                            <td>@vm.Config.Spec.Storage.DataDiskSizeGB GB <div class="text-primary">@vm.DataDisk.CurrentSizeGB GB used</div></td>
                            <td>@displayStatus.StartedOn</td>
                            <td>@displayStatus.RunningTime</td>
                            <td>
                                <p>
                                    @{
                                        var installedApps = ConfigStore.ListKubernetesAppsInstalledOn(vm.Name);
                                        var deployedApps = ConfigStore.ListKubernetesAppsDeployedOn(vm.Name);
                                    }
                                    @if (!installedApps.Any(app => app.Name == "wordslab-notebooks") || !installedApps.First(app => app.Name == "wordslab-notebooks").IsFullyDownloadedInContentStore)
                                    {
                                        <a href="/console/app%20download%20@(vm.Name)%20https%3A%2F%2Fraw.githubusercontent.com%2Fwordslab-org%2Fwordslab%2Fmain%2Fwordslab.manager%2Fapps%2Fnotebooks%2Fwordslab-notebooks-gpu-app.yaml" class="btn btn-primary" role="button">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-down-fill" viewBox="0 0 16 16">
                                                <path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 6.854-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5a.5.5 0 0 1 1 0v3.793l1.146-1.147a.5.5 0 0 1 .708.708z" />
                                            </svg>
                                            Download notebooks app
                                        </a>
                                    }
                                    else
                                    {
                                        if (!deployedApps.Any(app => app.App.Name == "wordslab-notebooks"))
                                        {
                                            var notebooksAppId = installedApps.First(app => app.Name == "wordslab-notebooks").YamlFileHash;

                                            <a href="/console/app%20deployment%20create%20@(vm.Name)%20@(System.Web.HttpUtility.UrlEncode(notebooksAppId))" class="btn btn-primary" role="button">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-fill" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M15.528 2.973a.75.75 0 0 1 .472.696v8.662a.75.75 0 0 1-.472.696l-7.25 2.9a.75.75 0 0 1-.557 0l-7.25-2.9A.75.75 0 0 1 0 12.331V3.669a.75.75 0 0 1 .471-.696L7.443.184l.004-.001.274-.11a.75.75 0 0 1 .558 0l.274.11.004.001 6.971 2.789Zm-1.374.527L8 5.962 1.846 3.5 1 3.839v.4l6.5 2.6v7.922l.5.2.5-.2V6.84l6.5-2.6v-.4l-.846-.339Z" />
                                                </svg>
                                                Deploy notebooks app
                                            </a>
                                        }
                                        else
                                        {
                                            var notebookApp = deployedApps.First(app => app.App.Name == "wordslab-notebooks");
                                            var appSpec = notebookApp.App;
                                            console.AsyncUtil.RunSync(() => KubernetesApp.ParseYamlFileContent(appSpec, loadContainersMetadata: false, ConfigStore));
                                            var deploymentNamespace = notebookApp.Namespace;
                                            var vmAddressAndPort = vm.RunningInstance.GetHttpAddressAndPort();
                                            if (appSpec.IngressRoutes.Count > 0)
                                            {
                                                <ul>
                                                @foreach (var ingressRouteInfo in appSpec.IngressRoutes)
                                                {
                                                    var urlsAndTitles = ingressRouteInfo.UrlsAndTitles(vmAddressAndPort, deploymentNamespace);
                                                    foreach (var urlAndTitle in urlsAndTitles)
                                                    {
                                                        <li><a href="@urlAndTitle.Item1">@urlAndTitle.Item2</a></li>
                                                    }
                                                }
                                                </ul>
                                            }
                                        }
                                    }
                                </p>
                            </td>
                        </tr>        
                    }
                </tbody>
            </table>
        }
                
        var stoppedVMs = vms.Where(vm => !vm.IsRunning()).ToList();
        if (stoppedVMs.Count > 0)
        {
            <h5 class="mt-2">Stopped virtual machines</h5>
            <table class="table table-striped table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th></th>
                        <th scope="col">Name</th>
                        <th scope="col">Processors</th>
                        <th scope="col">Memory</th>
                        <th scope="col">GPU</th>
                        <th scope="col">Cluster disk</th>
                        <th scope="col">Data disk</th>
                        <th scope="col">First start</th>
                        <th scope="col">Last stop</th>
                        <th scope="col">Last state</th>
                        <th scope="col">Total time</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var vm in stoppedVMs)
                    {
                        var displayStatus = vm.GetDisplayStatus();
                        string statusMessage;
                        vmsStatus.TryGetValue(vm.Name, out statusMessage); 

                        <tr class="align-middle">
                            <td>
                                <button class="btn btn-primary" disabled=@(statusMessage == "starting") @onclick="@(async () => await StartLocalVM(vm))">
                                @if(statusMessage == "starting")
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <text>   Starting...</text>
                                } 
                                else 
                                {                                    
                                    <text>Start</text>
                                }
                                </button>
                                @if(statusMessage != null && statusMessage.StartsWith("Failed"))
                                {
                                    <div class="alert alert-danger" role="alert">
                                      @statusMessage
                                    </div>
                                }
                            </td>
                            <td>@vm.Name</td>
                            <td>@displayStatus.Processors</td>
                            <td>@displayStatus.Memory</td>
                            <td>@displayStatus.GPU</td>
                            <td>@vm.Config.Spec.Storage.ClusterDiskSizeGB GB <div class="text-primary">@vm.ClusterDisk.CurrentSizeGB GB used</div></td>
                            <td>@vm.Config.Spec.Storage.DataDiskSizeGB GB <div class="text-primary">@vm.DataDisk.CurrentSizeGB GB used</div></td>
                            <td>@displayStatus.FirstStart</td>
                            <td>@displayStatus.LastStop</td>
                            <td>@displayStatus.LastState</td>
                            <td>@displayStatus.TotalTime</td>
                        </tr>        
                    }
                </tbody>
            </table>
        }
    }
else
{
    <p>No virtual machines found.</p>        
}

if(VmManager.ListLocalVMs().Count == 0)
{
    <p class="mt-3">
        <a href="/console/host%20vm%20create%20localvm" class="btn btn-primary" role="button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
            </svg>
            Create virtual machine
        </a>
    </p>
}
}

@code{
    private System.Timers.Timer _timer;

    private VirtualMachinesManager VmManager;

    protected override void OnInitialized()
    {
        VmManager = new VirtualMachinesManager(HostStorage, ConfigStore);

        _timer = new System.Timers.Timer(30000); // 30000 milliseconds = 30 seconds
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = true;
        _timer.Start();
    }

    private bool operationInProgress = false;

    private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (ConfigStore != null)
        {
            try
            {
                if (ConfigStore.Database!=null &&  !operationInProgress)
                {
                    InvokeAsync(() => StateHasChanged());
                }
            }
            catch(Exception) {}
        }
    }

    public void Dispose()
    {
        _timer.Dispose();
    }

    private Dictionary<string, string> vmsStatus = new Dictionary<string, string>();

    private async Task StartLocalVM(VirtualMachine vm)
    {
        if (!operationInProgress)
        {
            operationInProgress = true;
            try
            {
                string vmStatus;
                vmsStatus.TryGetValue(vm.Name, out vmStatus);
                if (vmStatus != "starting")
                {
                    vmsStatus[vm.Name] = "starting";
                    StateHasChanged();
                    await Task.Yield();

                    try
                    {
                        vm.Start();
                        vmsStatus.Remove(vm.Name);
                    }
                    catch (Exception e)
                    {
                        vmsStatus[vm.Name] = $"Failed to start VM: {e.Message}";
                    }
                    StateHasChanged();
                }
            }
            finally
            {
                operationInProgress = false;
            }
        }
    }

    private async Task StopLocalVM(VirtualMachine vm)
    {
        if (!operationInProgress)
        {
            operationInProgress = true;
            try
            {
                string vmStatus;
                vmsStatus.TryGetValue(vm.Name, out vmStatus);
                if (vmStatus != "stopping")
                {
                    vmsStatus[vm.Name] = "stopping";
                    StateHasChanged();
                    await Task.Yield();

                    try
                    {
                        vm.Stop();
                        vmsStatus.Remove(vm.Name);
                    }
                    catch (Exception e)
                    {
                        vmsStatus[vm.Name] = $"Failed to stop VM: {e.Message}";
                    }
                    StateHasChanged();
                }
            }
            finally
            {
                operationInProgress = false;
            }
        }
    }
}