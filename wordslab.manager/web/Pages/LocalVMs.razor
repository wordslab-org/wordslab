@page "/"
@page "/localvm"
@using wordslab.manager.apps;

@implements IDisposable

@inject HostStorage HostStorage
@inject ConfigStore ConfigStore
@inject VirtualMachinesManager VmManager

<PageTitle>Local VMs</PageTitle>

<p>Host machine: <b>@OS.GetMachineName()</b></p>

@{
    var config = ConfigStore.HostMachineConfig;
}

@if (config == null)
{ 
    <p>
        <a href="/console/host%20init" class="btn btn-primary" role="button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
            </svg>
            Configure host machine sandbox
        </a>
    </p>
}
else
{
    <h3>Local virtual machines</h3>

    var vms = VmManager.ListLocalVMs();
    if(vms.Count > 0)
    {
        var runningVMs = vms.Where(vm => vm.IsRunning()).ToList();
        if (runningVMs.Count > 0)
        {
            <h5>Running virtual machines</h5>
            <table class="table table-striped table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th></th>
                        <th scope="col">Name</th>
                        <th scope="col">Http address</th>
                        <th scope="col">Processors</th>
                        <th scope="col">Memory</th>
                        <th scope="col">GPU</th>
                        <th scope="col">Cluster disk</th>
                        <th scope="col">Data disk</th>
                        <th scope="col">Started on</th>
                        <th scope="col">Running since</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var vm in runningVMs)
                    {
                        var instance = vm.RunningInstance;
                        var displayStatus = instance.GetDisplayStatus();
                        string statusMessage;
                        vmsStatus.TryGetValue(vm.Name, out statusMessage);

                        <tr class="align-middle">
                           <td>
                                <button class="btn btn-primary" disabled=@(statusMessage == "stopping") @onclick="@(async () => await StopLocalVM(vm))">
                                @if(statusMessage == "stopping")
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <text>   Stopping...</text>
                                } 
                                else 
                                {                                    
                                    <text>Stop</text>
                                }
                                </button>
                                @if(statusMessage != null && statusMessage.StartsWith("Failed"))
                                {
                                    <div class="alert alert-primary" role="alert">
                                      @statusMessage
                                    </div>
                                }
                            </td>
                            <td class="fs-4 fw-bold">@vm.Name</td>
                            <td>@instance.GetHttpAddressAndPort()</td>                            
                            <td>@displayStatus.Processors <div class="text-primary">@displayStatus.ProcessorsUsage used</div></td>
                            <td>@displayStatus.Memory <div class="text-primary">@displayStatus.MemoryUsage used</div></td>
                            <td>@displayStatus.GPU <div class="text-primary">@displayStatus.GPUUsage</div></td>
                            <td>@vm.Config.Spec.Storage.ClusterDiskSizeGB GB <div class="text-primary">@vm.ClusterDisk.CurrentSizeGB GB used</div></td>
                            <td>@vm.Config.Spec.Storage.DataDiskSizeGB GB <div class="text-primary">@vm.DataDisk.CurrentSizeGB GB used</div></td>
                            <td>@displayStatus.StartedOn</td>
                            <td>@displayStatus.RunningTime</td>
                            <td>
                                <p>
                                    @{
                                        var installedApps = ConfigStore.ListKubernetesAppsInstalledOn(vm.Name);
                                        var deployedApps = ConfigStore.ListKubernetesAppsDeployedOn(vm.Name);
                                    }
                                    @if (!installedApps.Any(app => app.Name == "wordslab-notebooks") || !installedApps.First(app => app.Name == "wordslab-notebooks").IsFullyDownloadedInContentStore)
                                    {
                                        <a href="/console/app%20download%20@(vm.Name)%20https%3A%2F%2Fraw.githubusercontent.com%2Fwordslab-org%2Fwordslab%2Fmain%2Fwordslab.manager%2Fapps%2Fnotebooks%2Fwordslab-notebooks-gpu-app.yaml" class="btn btn-primary" role="button">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-down-fill" viewBox="0 0 16 16">
                                                <path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 6.854-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5a.5.5 0 0 1 1 0v3.793l1.146-1.147a.5.5 0 0 1 .708.708z" />
                                            </svg>
                                            Download notebooks app
                                        </a>
                                    }
                                    else
                                    {
                                        if (!deployedApps.Any(app => app.App.Name == "wordslab-notebooks"))
                                        {
                                            var notebooksAppId = installedApps.First(app => app.Name == "wordslab-notebooks").YamlFileHash;

                                            <a href="/console/app%20deployment%20create%20@(vm.Name)%20@(System.Web.HttpUtility.UrlEncode(notebooksAppId))" class="btn btn-primary" role="button">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-fill" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M15.528 2.973a.75.75 0 0 1 .472.696v8.662a.75.75 0 0 1-.472.696l-7.25 2.9a.75.75 0 0 1-.557 0l-7.25-2.9A.75.75 0 0 1 0 12.331V3.669a.75.75 0 0 1 .471-.696L7.443.184l.004-.001.274-.11a.75.75 0 0 1 .558 0l.274.11.004.001 6.971 2.789Zm-1.374.527L8 5.962 1.846 3.5 1 3.839v.4l6.5 2.6v7.922l.5.2.5-.2V6.84l6.5-2.6v-.4l-.846-.339Z" />
                                                </svg>
                                                Deploy notebooks app
                                            </a>
                                        }
                                        else
                                        {
                                            var notebookApp = deployedApps.First(app => app.App.Name == "wordslab-notebooks");
                                            var appSpec = notebookApp.App;
                                            console.AsyncUtil.RunSync(() => KubernetesApp.ParseYamlFileContent(appSpec, loadContainersMetadata: false, ConfigStore));
                                            var deploymentNamespace = notebookApp.Namespace;
                                            var vmAddressAndPort = vm.RunningInstance.GetHttpAddressAndPort();
                                            if (appSpec.IngressRoutes.Count > 0)
                                            {
                                                <ul>
                                                @foreach (var ingressRouteInfo in appSpec.IngressRoutes)
                                                {
                                                    var urlsAndTitles = ingressRouteInfo.UrlsAndTitles(vmAddressAndPort, deploymentNamespace);
                                                    foreach (var urlAndTitle in urlsAndTitles)
                                                    {
                                                        <li><a href="@urlAndTitle.Item1">@urlAndTitle.Item2</a></li>
                                                    }
                                                }
                                                </ul>
                                            }
                                        }
                                    }
                                </p>
                            </td>
                        </tr>        
                    }
                </tbody>
            </table>
        }
                
        var stoppedVMs = vms.Where(vm => !vm.IsRunning()).ToList();
        if (stoppedVMs.Count > 0)
        {
            <h5>Stopped virtual machines</h5>
            <table class="table table-striped table-bordered">
                <thead class="thead-light">
                    <tr>
                        <th></th>
                        <th scope="col">Name</th>
                        <th scope="col">Processors</th>
                        <th scope="col">Memory</th>
                        <th scope="col">GPU</th>
                        <th scope="col">Cluster disk</th>
                        <th scope="col">Data disk</th>
                        <th scope="col">First start</th>
                        <th scope="col">Last stop</th>
                        <th scope="col">Last state</th>
                        <th scope="col">Total time</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var vm in stoppedVMs)
                    {
                        var displayStatus = vm.GetDisplayStatus();
                        string statusMessage;
                        vmsStatus.TryGetValue(vm.Name, out statusMessage); 

                        <tr class="align-middle">
                            <td>
                                <button class="btn btn-primary" disabled=@(statusMessage == "starting") @onclick="@(async () => await StartLocalVM(vm))">
                                @if(statusMessage == "starting")
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <text>   Starting...</text>
                                } 
                                else 
                                {                                    
                                    <text>Start</text>
                                }
                                </button>
                                @if(statusMessage != null && statusMessage.StartsWith("Failed"))
                                {
                                    <div class="alert alert-primary" role="alert">
                                      @statusMessage
                                    </div>
                                }
                            </td>
                            <td>@vm.Name</td>
                            <td>@displayStatus.Processors</td>
                            <td>@displayStatus.Memory</td>
                            <td>@displayStatus.GPU</td>
                            <td>@vm.Config.Spec.Storage.ClusterDiskSizeGB GB <div class="text-primary">@vm.ClusterDisk.CurrentSizeGB GB used</div></td>
                            <td>@vm.Config.Spec.Storage.DataDiskSizeGB GB <div class="text-primary">@vm.DataDisk.CurrentSizeGB GB used</div></td>
                            <td>@displayStatus.FirstStart</td>
                            <td>@displayStatus.LastStop</td>
                            <td>@displayStatus.LastState</td>
                            <td>@displayStatus.TotalTime</td>
                        </tr>        
                    }
                </tbody>
            </table>
        }
    }
else
{
    <p>No virtual machines found.</p>        
}

if(VmManager.ListLocalVMs().Count == 0)
{
    <p class="mt-3">
        <a href="/console/host%20vm%20create%20localvm" class="btn btn-primary" role="button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
            </svg>
            Create virtual machine
        </a>
    </p>
}


<h3 class="mt-5">Host machine sandbox</h3>

<p>Wordslab install path: <small>@HostStorage.AppDirectory</small></p>

    <h5>Compute</h5>
    <table class="table table-striped table-bordered">
        <thead class="thead-light">
            <tr>
                <th scope="col">Max vm processors</th>
                <th scope="col">Max vm memory</th>
                <th scope="col">Can use GPUs?</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@config.Processors</td>
                <td>@config.MemoryGB GB</td>
                <td>@config.CanUseGPUs</td>
            </tr>
        </tbody>
    </table>

    <h5>Storage</h5>
    <table class="table table-striped table-bordered">
        <thead class="thead-light">
            <tr>
                <th></th>
                <th scope="col">Storage path</th>
                <th scope="col">Max size</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">Vm cluster disks</th>
                <td><small>@config.VirtualMachineClusterPath</small></td>
                <td>@config.VirtualMachineClusterSizeGB GB</td>
            </tr>
            <tr>
                <th scope="row">Vm data disks</th>
                <td><small>@config.VirtualMachineDataPath</small></td>
                <td>@config.VirtualMachineDataSizeGB GB</td>
            </tr>
            <tr>
                <th scope="row">Backups</th>
                <td><small>@config.BackupPath</small></td>
                <td>@config.BackupSizeGB GB</td>
            </tr>
        </tbody>
    </table>

    <h5>Network</h5>
    <table class="table table-striped table-bordered">
        <thead class="thead-light">
            <tr>
                @if (!OS.IsWindows)
                {
                <th scope="col">SSH ports range</th>
                }
                <th scope="col">Kubernetes ports range</th>
                <th scope="col">Http ports range</th>
                <th scope="col">Can expose Http on LAN?</th>                
                <th scope="col">Https ports range</th>
                <th scope="col">Can expose Https on LAN?</th> 
            </tr>
        </thead>
        <tbody>
            <tr>
                @if (!OS.IsWindows)
                {
                <td>@config.SSHPort-@(config.SSHPort+9)</td>
                }
                <td>@config.KubernetesPort-@(config.KubernetesPort+9)</td>
                <td>@config.HttpPort-@(config.HttpPort+9)</td>
                <td>@config.CanExposeHttpOnLAN</td>
                <td>@config.HttpsPort-@(config.HttpsPort+9)</td>
                <td>@config.CanExposeHttpsOnLAN</td>
            </tr>
        </tbody>
    </table>
}

@code{
    private System.Timers.Timer _timer;

    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(5000); // 5000 milliseconds = 5 seconds
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = true;
        _timer.Start();
    }

    private bool operationInProgress = false;

    private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (!operationInProgress)
        {
            InvokeAsync(() => StateHasChanged());
        }
    }

    public void Dispose()
    {
        _timer.Dispose();
    }

    private Dictionary<string, string> vmsStatus = new Dictionary<string, string>();

    private async Task StartLocalVM(VirtualMachine vm)
    {
        if (!operationInProgress)
        {
            operationInProgress = true;
            try
            {
                string vmStatus;
                vmsStatus.TryGetValue(vm.Name, out vmStatus);
                if (vmStatus != "starting")
                {
                    vmsStatus[vm.Name] = "starting";
                    StateHasChanged();
                    await Task.Yield();

                    try
                    {
                        vm.Start();
                        vmsStatus.Remove(vm.Name);
                    }
                    catch (Exception e)
                    {
                        vmsStatus[vm.Name] = $"Failed to start VM: {e.Message}";
                    }
                    StateHasChanged();
                }
            }
            finally
            {
                operationInProgress = false;
            }
        }
    }

    private async Task StopLocalVM(VirtualMachine vm)
    {
        if (!operationInProgress)
        {
            operationInProgress = true;
            try
            {
                string vmStatus;
                vmsStatus.TryGetValue(vm.Name, out vmStatus);
                if (vmStatus != "stopping")
                {
                    vmsStatus[vm.Name] = "stopping";
                    StateHasChanged();
                    await Task.Yield();

                    try
                    {
                        vm.Stop();
                        vmsStatus.Remove(vm.Name);
                    }
                    catch (Exception e)
                    {
                        vmsStatus[vm.Name] = $"Failed to stop VM: {e.Message}";
                    }
                    StateHasChanged();
                }
            }
            finally
            {
                operationInProgress = false;
            }
        }
    }
}