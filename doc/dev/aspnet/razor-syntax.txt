# Razor syntax

https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0

## Transitions between languages

The Razor syntax consists of Razor markup, C#, and HTML.

Files containing Razor generally have a .cshtml file extension. 
Razor is also found in Razor component files (.razor).

The default Razor language is HTML. 
Rendering HTML from Razor markup is no different than rendering HTML from an HTML file.

Razor supports C# and uses the @ symbol to transition from HTML to C#. 
Razor evaluates C# expressions and renders them in the HTML output.
To escape an @ symbol in Razor markup, use a second @ symbol.

- When an @ symbol is followed by a Razor reserved keyword, it transitions into Razor-specific markup. 
(see Directives below)

- HTML attributes and content containing email addresses don't treat the @ symbol as a transition character. 
(the email addresses in the following example are untouched by Razor parsing: <a href="mailto:Support@contoso.com">Support@contoso.com</a>)

## C# Expressions in HTML

Implicit Razor expressions start with @ followed by C# code:
<p>@DateTime.IsLeapYear(2016)</p>

- With the exception of the C# await keyword, implicit expressions must not contain spaces. 
If the C# statement has a clear ending, spaces can be intermingled.
<p>@await DoSomething("hello", "world")</p>

- Implicit expressions cannot contain C# generics, as the characters inside the brackets (<>) are interpreted as an HTML tag.
Generic method calls must be wrapped in an explicit Razor expression or a Razor code block.

Explicit Razor expressions consist of an @ symbol with balanced parenthesis. 
<p>Last week this time: @(DateTime.Now - TimeSpan.FromDays(7))</p>

- Explicit expressions can be used to render output from generic methods in .cshtml files. 
<p>@(GenericMethod<int>())</p>

C# expressions that evaluate to a string are HTML encoded. 
C# expressions that evaluate to IHtmlContent are rendered directly through IHtmlContent.WriteTo. 
C# expressions that don't evaluate to IHtmlContent are converted to a string by ToString and encoded before they're rendered.

@("<span>Hello World</span>") => &lt;span&gt;Hello World&lt;/span&gt;
@Html.Raw("<span>Hello World</span>") => <span>Hello World</span> (!! SECURITY RISK !!)

## C# Code blocks containing HTML

Razor code blocks start with @ and are enclosed by {}. 
Unlike expressions, C# code inside code blocks isn't rendered. 
Code blocks and expressions in a view share the same scope and are defined in order.

@{
    var quote = "The future depends on what you do today. - Mahatma Gandhi";
}
<p>@quote</p>

Implicit transitions
The default language in a code block is C#, but the Razor Page can transition back to HTML:

@{
    var inCSharp = true;
    <p>Now in HTML, was in C# @inCSharp</p>
}

Explicit delimited transition
To define a subsection of a code block that should render HTML, surround the characters for rendering with the Razor <text> tag.
Use this approach to render HTML that isn't surrounded by an HTML tag. 

The <text> tag is useful to control whitespace when rendering content:
Only the content between the <text> tag is rendered.
No whitespace before or after the <text> tag appears in the HTML output.

@for (var i = 0; i < people.Length; i++)
{
    var person = people[i];
    <text>Name: @person.Name</text>
}

Explicit line transition
To render the rest of an entire line as HTML inside a code block, use @: syntax:

@for (var i = 0; i < people.Length; i++)
{
    var person = people[i];
    @:Name: @person.Name
}

In code blocks, declare local functions with markup to serve as templating methods:

@{
    void RenderName(string name)
    {
        <p>Name: <strong>@name</strong></p>
    }

    RenderName("Mahatma Gandhi");
    RenderName("Martin Luther King, Jr.");
}

## C# Control structures

Control structures are an extension of code blocks. 
All aspects of code blocks (transitioning to markup, inline C#) also apply to the following structures:

Conditionals @if, else if, else, and @switch
else and else if don't require the @ symbol

@if (value % 2 == 0)
{
    <p>The value was even.</p>
}
else if (value >= 1337)
{
    <p>The value is large.</p>
}

Looping @for, @foreach, @while, and @do while

@foreach (var person in people)
{
    <p>Name: @person.Name</p>
    <p>Age: @person.Age</p>
}

Compound @using

@using (Html.BeginForm())
{
    <div>
        Email: <input type="email" id="Email" value="">
        <button>Register</button>
    </div>
}

@try, catch, finally

@try
{
    throw new InvalidOperationException("You did something invalid.");
}
catch (Exception ex)
{
    <p>The exception message: @ex.Message</p>
}
finally
{
    <p>The finally statement.</p>
}

@lock

@lock (SomeLock)
{
    // Do critical section work
}

## Comments

Razor supports C# and HTML comments:

@{
    /* C# comment */
    // Another C# comment
}
<!-- HTML comment -->

Razor comments are removed by the server before the webpage is rendered. 
Razor uses @* *@ to delimit comments. 

@*
    @{
        /* C# comment */
        // Another C# comment
    }
    <!-- HTML comment -->
*@

## Razor Directives

@attribute
@code                   (.razor component only)
@functions
@implements
@inherits
@inject
@layout                 (.razor component only)
@model                  (.cshtml view and pages only)
@namespace
@page
@preservewhitespace     (.razor component only)
@section                (.cshtml view and pages only)
@using

Razor directives are represented by implicit expressions with reserved keywords following the @ symbol. 
A directive typically changes the way a view is parsed or enables different functionality.

The @attribute directive adds the given attribute to the class of the generated page or view.
@attribute [Authorize]

The @code block enables a Razor component to add C# members (fields, properties, and methods) to a component.
This scenario only applies to Razor components (.razor).
For Razor components, @code is an alias of @functions and recommended over @functions. 
More than one @code block is permissible.
@code {
    // C# members (fields, properties, and methods)
}

The @functions directive enables adding C# members (fields, properties, and methods) to the generated class.
In Razor components, use @code over @functions to add C# members.
@functions {
    // C# members (fields, properties, and methods)
}

The @implements directive implements an interface for the generated class.
@implements IDisposable
<h1>Example</h1>
@functions {
    public void Dispose() => _isDisposed = true;
}

The @inherits directive provides full control of the class the view inherits:
@model and @inherits can be used in the same view. 
@inherits CustomRazorPage<TModel>

The @inject directive enables the Razor Page to inject a service from the service container into a view. 

The @layout directive specifies a layout for routable Razor components that have an @page directive.
This scenario only applies to Razor components (.razor).
Layout components are used to avoid code duplication and inconsistency. 

The @model directive specifies the type of the model passed to a view or page:
This scenario only applies to MVC views and Razor Pages (.cshtml).
@model LoginViewModel
The class generated inherits from RazorPage<dynamic>:
public class _Views_Account_Login_cshtml : RazorPage<LoginViewModel>
Razor exposes a Model property for accessing the model passed to the view:
<div>The Login Email: @Model.Email</div>

The @namespace directive:
Sets the namespace of the class of the generated Razor page, MVC view, or Razor component.
Sets the root derived namespaces of a pages, views, or components classes from the closest imports file in the directory tree, _ViewImports.cshtml (views or pages) or _Imports.razor (Razor components).

The @page directive has different effects depending on the type of the file where it appears.
In a .cshtml file indicates that the file is a Razor Page. For more information, see Custom routes and Introduction to Razor Pages in ASP.NET Core.
Specifies that a Razor component should handle requests directly. For more information, see ASP.NET Core Blazor routing.

@preservewhitespace
This scenario only applies to Razor components (.razor).
When set to false (default), whitespace in the rendered markup from Razor components (.razor) is removed if:
- Leading or trailing within an element.
- Leading or trailing within a RenderFragment parameter. For example, child content passed to another component.
- It precedes or follows a C# code block, such as @if or @foreach.

The @section directive is used in conjunction with MVC and Razor Pages layouts to enable views or pages to render content in different parts of the HTML page. For more information, see Layout in ASP.NET Core.
This scenario only applies to MVC views and Razor Pages (.cshtml).

The @using directive adds the C# using directive to the generated view:
@using System.IO
In Razor components, @using also controls which components are in scope.

## Razor Directive attributes

-- This scenario only applies to Razor components (.razor) --

@attributes
@bind 
@bind:event
@bind:culture
@on{EVENT}
@on{EVENT}:preventDefault
@on{EVENT}:stopPropagation
@key
@ref
@typeparam

@attributes allows a component to render non-declared attributes. 
Components can capture and render additional attributes in addition to the component's declared parameters. 
Additional attributes can be captured in a dictionary and then splatted onto an element when the component is rendered using the @attributes Razor directive attribute. 
This scenario is useful for defining a component that produces a markup element that supports a variety of customizations.
<input id="useAttributesDict" @attributes="InputAttributes" />
@code {
    private Dictionary<string, object> InputAttributes { get; set; } =
        new()
        {
            { "maxlength", "10" },
            { "placeholder", "Input placeholder text" },
            { "required", "required" },
            { "size", "50" }
        };
}

Data binding in components is accomplished with the @bind attribute. 
For more information, see ASP.NET Core Blazor data binding.
<input @bind="InputValue" @bind:event="oninput" />
Use the @bind:culture attribute with the @bind attribute to provide a System.Globalization.CultureInfo for parsing and formatting a value.
For more information, see ASP.NET Core Blazor globalization and localization.

@on{EVENT} : Razor provides event handling features for components. 
For more information, see ASP.NET Core Blazor event handling.
@on{EVENT}:preventDefault : Prevents the default action for the event.
@on{EVENT}:stopPropagation : Stops event propagation for the event.

The @key directive attribute causes the components diffing algorithm to guarantee preservation of elements or components based on the key's value. 
Typically, it makes sense to use @key whenever a list is rendered (for example, in a foreach block) and a suitable value exists to define the @key.
You can also use @key to preserve an element or component subtree when an object doesn't change.
The @key attribute directive is scoped to its own siblings within its parent.
There's a performance cost when rendering with @key. The performance cost isn't large, but only specify @key if preserving the element or component benefits the app.
Example : The contents of the people collection changes with inserted, deleted, or re-ordered entries. 
Rerendering can lead to visible behavior differences. Each time a person is inserted into the people collection, the preceding element of the currently focused element receives the focus. 
The user's focus is lost.
If the Details component in the preceding example is keyed on the person item, Blazor ignores rerendering Details components that haven't changed.
<Details @key="person" Data="@person.Data" />

Component references (@ref) provide a way to reference a component instance so that you can issue commands to that instance.
To capture a component reference:
- Add an @ref attribute to the child component.
- Define a field with the same type as the child component.
A component reference is only populated after the component is rendered and its output includes ReferenceChild's element. 
Until the component is rendered, there's nothing to reference.
<ReferenceChild @ref="childComponent" />
@code {
    private ReferenceChild childComponent;
}

The @typeparam directive declares a generic type parameter for the generated component class:
@typeparam TEntity

## Templated Razor delegates

Razor templates allow you to define a UI snippet with the following format:
@<tag>...</tag>

@{
    Func<dynamic, object> petTemplate = @<p>You have a pet named <strong>@item.Name</strong>.</p>;
}

@foreach (var pet in pets)
{
    @petTemplate(pet)
}

## Tag Helpers

-- This scenario only applies to MVC views and Razor Pages (.cshtml) --

@addTagHelper	    Makes Tag Helpers available to a view.
@removeTagHelper    Removes Tag Helpers previously added from a view.
@tagHelperPrefix    Specifies a tag prefix to enable Tag Helper support and to make Tag Helper usage explicit.

---

Cache Tag Helper
Distributed Cache Tag Helper

The Cache Tag Helper provides the ability to improve the performance of your ASP.NET Core app by caching its content to the internal ASP.NET Core cache provider.
<cache>@DateTime.Now</cache>

Component Tag Helper

Integrating Razor components into Razor Pages and MVC apps in a hosted Blazor WebAssembly app is supported in ASP.NET Core in .NET 5.0 or later.
<component type="typeof(Counter)" render-mode="ServerPrerendered" />

Environment Tag Helper

<environment names="Staging,Production">
    <strong>IWebHostEnvironment.EnvironmentName is Staging or Production</strong>
</environment>

Link Tag Helper

The Link Tag Helper allows you to specify a CDN for the CSS file and a fallback when the CDN is not available. 
The Link Tag Helper provides the performance advantage of a CDN with the robustness of local hosting.

<link rel="stylesheet" 
              href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css"
              asp-fallback-href="~/lib/bootstrap/dist/css/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" 
              asp-fallback-test-value="absolute"
              crossorigin="anonymous"
              integrity="sha256-eSi1q2PG6J7g7ib17yAaWMcrr5GrtohYChqibrV7PBE=" />

Script Tag Helper

The Script Tag Helper allows you to specify a CDN for the script file and a fallback when the CDN is not available. 
The Script Tag Helper provides the performance advantage of a CDN with the robustness of local hosting.

<script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.3.1.min.js"
        asp-fallback-src="~/lib/jquery/dist/jquery.min.js"
        asp-fallback-test="window.jQuery"
        crossorigin="anonymous"
        integrity="sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT">
</script>

Image Tag Helper

The Image Tag Helper enhances the <img> tag to provide cache-busting behavior for static image files.
If the image source (src) is a static file on the host web server:
A unique cache-busting string is appended as a query parameter to the image source.
A cache-busting string is a unique value representing the hash of the static image file appended to the asset's URL. 
If the file on the host web server changes, a unique request URL is generated that includes the updated request parameter.
The unique string prompts clients (and some proxies) to reload the image from the host web server and not from the client's cache.

<img src="~/images/asplogo.png" asp-append-version="true">

Anchor Tag Helper attributes

asp-controller
asp-action
asp-route-{value}
asp-route
asp-all-route-data
asp-fragment
asp-area
asp-protocol
asp-host
asp-page
asp-page-handler

<a asp-controller="Speaker"
   asp-action="Detail" 
   asp-route-id="@Model.SpeakerId">SpeakerId: @Model.SpeakerId</a>

Form Tag Helper
Form Action Tag Helper

asp-controller	The name of the controller.
asp-action	The name of the action method.
asp-area	The name of the area.
asp-page	The name of the Razor page.
asp-page-handler	The name of the Razor page handler.
asp-route	The name of the route.
asp-route-{value}	A single URL route value. For example, asp-route-id="1234".
asp-all-route-data	All route values.
asp-fragment	The URL fragment.

<form asp-controller="Account" asp-action="Login"
     asp-route-returnurl="@ViewData["ReturnUrl"]"
     method="post" class="form-horizontal" role="form">

<form method="post">
    <button asp-controller="Home" asp-action="Index">Click Me</button>
    <input type="image" src="..." alt="Or Click Me" asp-controller="Home" 
                                asp-action="Index">
</form>

Label Tag Helper
Input Tag Helper
Textarea Tag Helper


.NET type	    Input Type
Bool	        type="checkbox"
String	        type="text"
DateTime	    type="datetime-local"
Byte	        type="number"
Int	            type="number"
Single,Double	type="number"

Attribute	Input Type
[EmailAddress]	type="email"
[Url]	        type="url"
[HiddenInput]	type="hidden"
[Phone]	        type="tel"
[DataType(DataType.Password)]	type="password"
[DataType(DataType.Date)]	    type="date"
[DataType(DataType.Time)]	    type="time"

<label asp-for="Email"></label> : <input asp-for="Email" />
<textarea asp-for="Description"></textarea>

Select Tag Helper

https://docs.microsoft.com/en-us/aspnet/core/mvc/views/working-with-forms?view=aspnetcore-5.0#the-select-tag-helper

<select asp-for="Country" asp-items="Model.Countries"></select>

public string Country { get; set; }
public List<SelectListItem> Countries  { get; }

Validation Message Tag Helper

Adds the HTML5 data-valmsg-for="property" attribute to the span element, which attaches the validation error messages on the input field of the specified model property. 
When a client side validation error occurs, jQuery displays the error message in the <span> element.
Validation also takes place on the server. Clients may have JavaScript disabled and some validation can only be done on the server side.

<span asp-validation-for="Email"></span>

Validation Summary Tag Helper

Targets <div> elements with the asp-validation-summary attribute.
The Validation Summary Tag Helper is used to display a summary of validation messages. 
The asp-validation-summary attribute value can be any of the following:
ValidationSummary.All	    Property and model level
ValidationSummary.ModelOnly	Model
ValidationSummary.None	    None

@model RegisterViewModel

<form asp-controller="Demo" asp-action="RegisterValidation" method="post">
    <div asp-validation-summary="ModelOnly"></div>
    Email:  <input asp-for="Email" /> <br />
    <span asp-validation-for="Email"></span><br />
    Password: <input asp-for="Password" /><br />
    <span asp-validation-for="Password"></span><br />
    <button type="submit">Register</button>
</form>